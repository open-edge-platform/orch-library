// Code generated by MockGen. DO NOT EDIT.
// Source: oidc-client.go
//
// Generated by this command:
//
//	mockgen -destination=oidc-mock-rest.go -package=openidconnect -source oidc-client.go ClientWithResponsesInterface
//

// Package openidconnect is a generated GoMock package.
package openidconnect

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// GetWellKnownOpenidConfiguration mocks base method.
func (m *MockClientInterface) GetWellKnownOpenidConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWellKnownOpenidConfiguration", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWellKnownOpenidConfiguration indicates an expected call of GetWellKnownOpenidConfiguration.
func (mr *MockClientInterfaceMockRecorder) GetWellKnownOpenidConfiguration(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWellKnownOpenidConfiguration", reflect.TypeOf((*MockClientInterface)(nil).GetWellKnownOpenidConfiguration), varargs...)
}

// PostProtocolOpenidConnectTokenWithBody mocks base method.
func (m *MockClientInterface) PostProtocolOpenidConnectTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProtocolOpenidConnectTokenWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProtocolOpenidConnectTokenWithBody indicates an expected call of PostProtocolOpenidConnectTokenWithBody.
func (mr *MockClientInterfaceMockRecorder) PostProtocolOpenidConnectTokenWithBody(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProtocolOpenidConnectTokenWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostProtocolOpenidConnectTokenWithBody), varargs...)
}

// PostProtocolOpenidConnectTokenWithFormdataBody mocks base method.
func (m *MockClientInterface) PostProtocolOpenidConnectTokenWithFormdataBody(ctx context.Context, body PostProtocolOpenidConnectTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProtocolOpenidConnectTokenWithFormdataBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProtocolOpenidConnectTokenWithFormdataBody indicates an expected call of PostProtocolOpenidConnectTokenWithFormdataBody.
func (mr *MockClientInterfaceMockRecorder) PostProtocolOpenidConnectTokenWithFormdataBody(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProtocolOpenidConnectTokenWithFormdataBody", reflect.TypeOf((*MockClientInterface)(nil).PostProtocolOpenidConnectTokenWithFormdataBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// GetWellKnownOpenidConfigurationWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetWellKnownOpenidConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWellKnownOpenidConfigurationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWellKnownOpenidConfigurationWithResponse", varargs...)
	ret0, _ := ret[0].(*GetWellKnownOpenidConfigurationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWellKnownOpenidConfigurationWithResponse indicates an expected call of GetWellKnownOpenidConfigurationWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetWellKnownOpenidConfigurationWithResponse(ctx any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWellKnownOpenidConfigurationWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetWellKnownOpenidConfigurationWithResponse), varargs...)
}

// PostProtocolOpenidConnectTokenWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProtocolOpenidConnectTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostProtocolOpenidConnectTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProtocolOpenidConnectTokenWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*PostProtocolOpenidConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProtocolOpenidConnectTokenWithBodyWithResponse indicates an expected call of PostProtocolOpenidConnectTokenWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProtocolOpenidConnectTokenWithBodyWithResponse(ctx, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProtocolOpenidConnectTokenWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProtocolOpenidConnectTokenWithBodyWithResponse), varargs...)
}

// PostProtocolOpenidConnectTokenWithFormdataBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostProtocolOpenidConnectTokenWithFormdataBodyWithResponse(ctx context.Context, body PostProtocolOpenidConnectTokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostProtocolOpenidConnectTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostProtocolOpenidConnectTokenWithFormdataBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*PostProtocolOpenidConnectTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostProtocolOpenidConnectTokenWithFormdataBodyWithResponse indicates an expected call of PostProtocolOpenidConnectTokenWithFormdataBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostProtocolOpenidConnectTokenWithFormdataBodyWithResponse(ctx, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostProtocolOpenidConnectTokenWithFormdataBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostProtocolOpenidConnectTokenWithFormdataBodyWithResponse), varargs...)
}
