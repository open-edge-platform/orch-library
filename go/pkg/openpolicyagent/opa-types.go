// Package openpolicyagent provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package openpolicyagent

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

// OpaError defines model for OpaError.
type OpaError struct {
	// Code Seen in the 400 error
	Code *string `json:"code,omitempty"`

	// Error Seen in the 500 error
	Error *string `json:"error,omitempty"`

	// Message Seen in the 400 error
	Message *string `json:"message,omitempty"`
}

// OpaInput OpenPolicyAgent Input
type OpaInput struct {
	// Input the input object
	Input map[string]interface{} `json:"input"`
}

// OpaResponse API Response
type OpaResponse struct {
	// DecisionId If decision logging is enabled, this field contains a string that uniquely identifies the decision. The identifier will be included in the decision log event for this decision. Callers can use the identifier for correlation purpose
	DecisionId *string `json:"decision_id,omitempty"`

	// Metrics If query metrics are enabled, this field contains query performance metrics collected during the parse, compile, and evaluation steps.
	Metrics *map[string]interface{} `json:"metrics,omitempty"`

	// Result The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
	Result OpaResponse_Result `json:"result"`
}

// OpaResponseResult0 defines model for .
type OpaResponseResult0 = map[string]interface{}

// OpaResponseResult1 defines model for .
type OpaResponseResult1 = bool

// OpaResponse_Result The base or virtual document referred to by the URL path. If the path is undefined, this key will be omitted.
type OpaResponse_Result struct {
	union json.RawMessage
}

// PostV1DataPackageRuleParams defines parameters for PostV1DataPackageRule.
type PostV1DataPackageRuleParams struct {
	// Explain Return query explanation in addition to result. Values; notes, fails, full, debug
	Explain *string `form:"explain,omitempty" json:"explain,omitempty"`

	// Pretty If parameter is true, response will be formatted for humans
	Pretty *bool `form:"pretty,omitempty" json:"pretty,omitempty"`

	// Metrics Return query performance metrics in addition to result. See Performance Metrics for more detail
	Metrics *bool `form:"metrics,omitempty" json:"metrics,omitempty"`

	// Provenance If parameter is true, response will include build/version info in addition to the result. See Provenance for more detail.
	Provenance *bool `form:"provenance,omitempty" json:"provenance,omitempty"`
}

// PostV1DataPackageRuleJSONRequestBody defines body for PostV1DataPackageRule for application/json ContentType.
type PostV1DataPackageRuleJSONRequestBody = OpaInput

// AsOpaResponseResult0 returns the union data inside the OpaResponse_Result as a OpaResponseResult0
func (t OpaResponse_Result) AsOpaResponseResult0() (OpaResponseResult0, error) {
	var body OpaResponseResult0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOpaResponseResult0 overwrites any union data inside the OpaResponse_Result as the provided OpaResponseResult0
func (t *OpaResponse_Result) FromOpaResponseResult0(v OpaResponseResult0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOpaResponseResult0 performs a merge with any union data inside the OpaResponse_Result, using the provided OpaResponseResult0
func (t *OpaResponse_Result) MergeOpaResponseResult0(v OpaResponseResult0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsOpaResponseResult1 returns the union data inside the OpaResponse_Result as a OpaResponseResult1
func (t OpaResponse_Result) AsOpaResponseResult1() (OpaResponseResult1, error) {
	var body OpaResponseResult1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOpaResponseResult1 overwrites any union data inside the OpaResponse_Result as the provided OpaResponseResult1
func (t *OpaResponse_Result) FromOpaResponseResult1(v OpaResponseResult1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOpaResponseResult1 performs a merge with any union data inside the OpaResponse_Result, using the provided OpaResponseResult1
func (t *OpaResponse_Result) MergeOpaResponseResult1(v OpaResponseResult1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t OpaResponse_Result) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *OpaResponse_Result) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
