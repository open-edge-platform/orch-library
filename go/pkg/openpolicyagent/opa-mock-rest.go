// Code generated by MockGen. DO NOT EDIT.
// Source: opa-client.go
//
// Generated by this command:
//
//	mockgen -destination=opa-mock-rest.go -package=openpolicyagent -source opa-client.go ClientWithResponsesInterface
//

// Package openpolicyagent is a generated GoMock package.
package openpolicyagent

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
	isgomock struct{}
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// PostV1DataPackageRule mocks base method.
func (m *MockClientInterface) PostV1DataPackageRule(ctx context.Context, pPackage, rule string, params *PostV1DataPackageRuleParams, body PostV1DataPackageRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pPackage, rule, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV1DataPackageRule", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV1DataPackageRule indicates an expected call of PostV1DataPackageRule.
func (mr *MockClientInterfaceMockRecorder) PostV1DataPackageRule(ctx, pPackage, rule, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pPackage, rule, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV1DataPackageRule", reflect.TypeOf((*MockClientInterface)(nil).PostV1DataPackageRule), varargs...)
}

// PostV1DataPackageRuleWithBody mocks base method.
func (m *MockClientInterface) PostV1DataPackageRuleWithBody(ctx context.Context, pPackage, rule string, params *PostV1DataPackageRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pPackage, rule, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV1DataPackageRuleWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV1DataPackageRuleWithBody indicates an expected call of PostV1DataPackageRuleWithBody.
func (mr *MockClientInterfaceMockRecorder) PostV1DataPackageRuleWithBody(ctx, pPackage, rule, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pPackage, rule, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV1DataPackageRuleWithBody", reflect.TypeOf((*MockClientInterface)(nil).PostV1DataPackageRuleWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
	isgomock struct{}
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// PostV1DataPackageRuleWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostV1DataPackageRuleWithBodyWithResponse(ctx context.Context, pPackage, rule string, params *PostV1DataPackageRuleParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostV1DataPackageRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pPackage, rule, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV1DataPackageRuleWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*PostV1DataPackageRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV1DataPackageRuleWithBodyWithResponse indicates an expected call of PostV1DataPackageRuleWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostV1DataPackageRuleWithBodyWithResponse(ctx, pPackage, rule, params, contentType, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pPackage, rule, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV1DataPackageRuleWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostV1DataPackageRuleWithBodyWithResponse), varargs...)
}

// PostV1DataPackageRuleWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) PostV1DataPackageRuleWithResponse(ctx context.Context, pPackage, rule string, params *PostV1DataPackageRuleParams, body PostV1DataPackageRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*PostV1DataPackageRuleResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pPackage, rule, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostV1DataPackageRuleWithResponse", varargs...)
	ret0, _ := ret[0].(*PostV1DataPackageRuleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostV1DataPackageRuleWithResponse indicates an expected call of PostV1DataPackageRuleWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) PostV1DataPackageRuleWithResponse(ctx, pPackage, rule, params, body any, reqEditors ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pPackage, rule, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostV1DataPackageRuleWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).PostV1DataPackageRuleWithResponse), varargs...)
}
